on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DEBIAN_FRONTEND: noninteractive
  ROOT_DIR_PREFIX: "OP13r-A15"
  # BRANCH: "android14-6.1" # Removed as unused, uncomment and use if needed
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build-release:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Free Disk Space
      - name: Free Disk Space
        run: |
          sudo apt-get update -qq
          sudo apt-get install -qq curl # Ensure curl is present before using it
          curl -fsSL https://raw.githubusercontent.com/kou/arrow/e49d8ae15583ceff03237571569099a6ad62be32/ci/scripts/util_free_space.sh | bash

      # Step 3: Setup Build Environment
      - name: Setup Build Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            python3-pip curl git zip unzip gcc g++ make ninja-build \
            bc bison flex libssl-dev libelf-dev wget build-essential \
            python3-dev python3-setuptools rsync ccache cmake libdw-dev zlib1g-dev \
            jq # Added jq for Step 15

      # Step 4: Setup ccache
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          max-size: 2G

      # Step 5: Setup Python and Repo Tool
      - name: Setup Python and Repo Tool
        run: |
          python3 -m pip install --upgrade pip
          pip3 install gitpython xmltodict
          mkdir -p ~/.bin
          curl -s https://storage.googleapis.com/git-repo-downloads/repo > ~/.bin/repo
          chmod a+x ~/.bin/repo
          echo "$HOME/.bin" >> $GITHUB_PATH
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          # Removed redundant export PATH

      # Step 6: Configure Build Directory
      - name: Configure Build Directory
        run: |
          ROOT_DIR="${ROOT_DIR_PREFIX}-$(date +'%Y-%m-%d-%I-%M-%p')-release"
          echo "ROOT_DIR=${ROOT_DIR}" >> $GITHUB_ENV
          mkdir -p "builds/${ROOT_DIR}"

      # Step 7: Clone Required Repositories
      - name: Clone Required Repositories
        working-directory: builds/${{ env.ROOT_DIR }}
        run: |
          repos=(
            "https://github.com/Kernel-SU/AnyKernel3 --depth=1"
            "https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android14-6.1 susfs4ksu" # Added target directory name
            "https://github.com/WildPlusKernel/kernel_patches.git kernel_patches"     # Added target directory name
          )
          for repo_info in "${repos[@]}"; do
            git clone $repo_info || { echo "Failed to clone $repo_info"; exit 1; }
          done

      # Step 8: Setup Kernel Source
      - name: Setup Kernel Source
        working-directory: builds/${{ env.ROOT_DIR }}
        run: |
          mkdir -p kernel_platform/oneplus13r_v
          cd kernel_platform/oneplus13r_v
          repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b oneplus/sm8650 -m oneplus_13r.xml --depth=1 || { echo "Failed to initialize repo"; exit 1; }
          repo sync -c -j$(nproc --all) --force-sync --no-clone-bundle --no-tags || { echo "Failed to sync repo"; exit 1; }
          # Optional: Explain why these are removed if needed by maintainers
          # Removing default ABI symbol lists; build will use user-specified list
          rm -rf ./kernel_platform/common/android/abi_gki_protected_exports_*

      # Step 9: Setup KernelSU
      - name: Setup KernelSU
        working-directory: builds/${{ env.ROOT_DIR }}/kernel_platform/oneplus13r_v/kernel_platform
        run: |
          curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next/kernel/setup.sh" | bash -s next
          git submodule update --init --recursive
          cd KernelSU-Next/kernel
          # Calculate KSU version based on commit count (example method)
          KSU_VERSION=$(expr $(git rev-list --count HEAD) + 10200)
          echo "Calculated KSU Version: $KSU_VERSION"
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          # Update KSU version in Makefile
          sed -i "s/DKSU_VERSION=11998/DKSU_VERSION=${KSU_VERSION}/" Makefile

      # Step 10: Setup SUSFS
      - name: Setup SUSFS
        working-directory: builds/${{ env.ROOT_DIR }}/kernel_platform/oneplus13r_v/kernel_platform
        run: |
          set -euxo pipefail
          # Use previously cloned repos from Step 7 (adjust paths relative to current working directory)
          SUSFS_DIR="../../susfs4ksu"
          PATCHES_DIR="../../kernel_patches"

          # Check if directories exist
          if [ ! -d "$SUSFS_DIR" ]; then echo "SUSFS directory ($SUSFS_DIR) not found!"; exit 1; fi
          if [ ! -d "$PATCHES_DIR" ]; then echo "Patches directory ($PATCHES_DIR) not found!"; exit 1; fi

          # Copy patches and source files
          cp "$SUSFS_DIR/kernel_patches/50_add_susfs_in_gki-android14-6.1.patch" ./common/
          cp "$PATCHES_DIR/next/0001-kernel-patch-susfs-v1.5.5-to-KernelSU-Next-v1.0.5.patch" ./KernelSU-Next/
          cp "$PATCHES_DIR/next/syscall_hooks.patch" ./common/
          cp "$SUSFS_DIR/kernel_patches/fs/"* ./common/fs/
          cp "$SUSFS_DIR/kernel_patches/include/linux/"* ./common/include/linux/

          # Apply patches
          cd ./KernelSU-Next
          patch -p1 < 0001-kernel-patch-susfs-v1.5.5-to-KernelSU-Next-v1.0.5.patch || true
          cd ../common
          patch -p1 < 50_add_susfs_in_gki-android14-6.1.patch || true
          # Optional hide patch
          if [ -f "$PATCHES_DIR/69_hide_stuff.patch" ]; then
              cp "$PATCHES_DIR/69_hide_stuff.patch" ./
              patch -p1 -F 3 < 69_hide_stuff.patch || true
          fi
          patch -p1 -F 3 < syscall_hooks.patch || true

      # Step 11: Configure Kernel
      - name: Configure Kernel
        working-directory: builds/${{ env.ROOT_DIR }}/kernel_platform/oneplus13r_v/kernel_platform
        run: |
          set -e
          CONFIGS=(
            "CONFIG_KSU=y"
            "CONFIG_KSU_WITH_KPROBES=n"
            "CONFIG_KSU_SUSFS=y"
            "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y"
            "CONFIG_KSU_SUSFS_SUS_PATH=y"
            "CONFIG_KSU_SUSFS_SUS_MOUNT=y"
            "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y"
            "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y"
            "CONFIG_KSU_SUSFS_SUS_KSTAT=y"
            "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n"
            "CONFIG_KSU_SUSFS_TRY_UMOUNT=y"
            "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y"
            "CONFIG_KSU_SUSFS_SPOOF_UNAME=y"
            "CONFIG_KSU_SUSFS_ENABLE_LOG=y"
            "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y"
            "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y"
            "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y"
            "CONFIG_KSU_SUS_SU=n"
            "CONFIG_TMPFS_XATTR=y"
            "CONFIG_TMPFS_POSIX_ACL=y"
            "CONFIG_IP_NF_TARGET_TTL=y"
            "CONFIG_IP6_NF_TARGET_HL=y"
            "CONFIG_IP6_NF_MATCH_HL=y"
            "CONFIG_SCHED_CLASS_EXT=y"
            "CONFIG_SMP=y"
            "CONFIG_CPU_FREQ_GOV_SCHEDUTIL=y"
            "CONFIG_MSM_PERFORMANCE=y"
            "CONFIG_NO_HZ_IDLE=y"
            "CONFIG_PM_SLEEP_SMP=y"
          )
          DEFCONFIG_PATH="./common/arch/arm64/configs/gki_defconfig"
          for CONFIG in "${CONFIGS[@]}"; do
            # Add config if not present, or uncomment if present but commented out
            if ! grep -q "^${CONFIG}" "${DEFCONFIG_PATH}"; then
              if grep -q "^# ${CONFIG%%=*} is not set" "${DEFCONFIG_PATH}"; then
                 sed -i "s|^# ${CONFIG%%=*} is not set|${CONFIG}|" "${DEFCONFIG_PATH}"
              else
                 echo "$CONFIG" >> "${DEFCONFIG_PATH}"
              fi
            fi
          done
          # Modify build config - using line number might be fragile, consider alternative if possible
          sed -i '2s/check_defconfig//' ./common/build.config.gki

      # Step 12: Run sed Commands (Post-Config)
      - name: Run sed Commands (Post-Config)
        working-directory: builds/${{ env.ROOT_DIR }}/kernel_platform/oneplus13r_v/kernel_platform
        run: |
          echo "Running sed commands..."
          # Removed redundant check_defconfig removal
          sed -i 's/-dirty//' ./common/scripts/setlocalversion
          sed -i 's/-dirty//' ./msm-kernel/scripts/setlocalversion
          sed -i 's/-dirty//' ./external/dtc/scripts/setlocalversion
          # Handle potential absence of the kleaf script gracefully
          sed -i 's/-dirty//' ./build/kernel/kleaf/workspace_status_stamp.py || echo "No workspace_status_stamp.py found or sed failed."

      # Step 13: Build Kernel
      - name: Build Kernel
        working-directory: builds/${{ env.ROOT_DIR }}/kernel_platform/oneplus13r_v/
        run: |
          cd kernel_platform
          mkdir -p out # Ensure out directory exists before build command uses it
          export PATH="/usr/lib/ccache:$PATH"
          ./build_with_bazel.py \
            -t pineapple \
            gki \
            --jobs=$(nproc --all) \
            --verbose_failures \
            --config=stamp \
            --user_kmi_symbol_lists=//msm-kernel:android/abi_gki_aarch64_qcom \
            --ignore_missing_projects \
            --lto=thin \
            -o "$(pwd)/out" \
            || { echo "❌ Bazel build failed"; exit 1; }

      # Step 14: Create ZIP Package
      - name: Create ZIP Package
        working-directory: builds/${{ env.ROOT_DIR }}
        run: |
          KERNEL_IMAGE="kernel_platform/oneplus13r_v/kernel_platform/out/dist/Image"
          if [ ! -f "$KERNEL_IMAGE" ]; then
            echo "❌ Kernel image not found at $KERNEL_IMAGE"
            exit 1
          fi
          # Ensure AnyKernel3 dir exists from Step 7
          if [ ! -d "AnyKernel3" ]; then
            echo "❌ AnyKernel3 directory not found!"
            exit 1
          fi

          cp "$KERNEL_IMAGE" AnyKernel3/Image || { echo "❌ Failed to copy kernel image"; exit 1; }
          cd AnyKernel3
          ZIP_NAME="OP13r-KSU-${{ env.KSUVER }}-$(date +%Y%m%d-%H%M).zip" # Added date for uniqueness
          echo "📦 Creating zip file: $ZIP_NAME"
          zip -r9 "../$ZIP_NAME" ./* || { echo "❌ Failed to create zip file"; exit 1; }
          cd .. # Return to ROOT_DIR
          ls -lh "$ZIP_NAME"
          # Removed unused export zip_name

      # Step 15: Download Latest SUSFS Module from CI (Verify AnyKernel3 compatibility)
      # Note: Ensure your AnyKernel3 script handles ksu_module_susfs.zip correctly
      - name: Download Latest SUSFS Module from CI
        working-directory: builds/${{ env.ROOT_DIR }} # Run from the build root
        run: |
          echo "Attempting to download latest SUSFS module artifact..."
          LATEST_RUN_ID=$(curl -s -H "Authorization: Bearer ${{ env.GH_TOKEN }}" \
            "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/runs?status=success&branch=main" | jq -r '.workflow_runs[0].id // empty')

          if [ -z "$LATEST_RUN_ID" ]; then
              echo "⚠️ Could not find the latest successful run ID for sidex15/susfs4ksu-module."
              # Decide whether to fail or continue without the module
              echo "Continuing build without pre-built SUSFS module."
              exit 0 # Or exit 1 if the module is mandatory
          fi
          echo "Found latest successful run ID: $LATEST_RUN_ID"

          ARTIFACT_URL=$(curl -s -H "Authorization: Bearer ${{ env.GH_TOKEN }}" \
            "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/runs/$LATEST_RUN_ID/artifacts" | jq -r '.artifacts[0].archive_download_url // empty')

          if [ -z "$ARTIFACT_URL" ]; then
              echo "⚠️ Could not find the artifact URL for run ID $LATEST_RUN_ID."
              echo "Continuing build without pre-built SUSFS module."
              exit 0 # Or exit 1
          fi
          echo "Found artifact URL: $ARTIFACT_URL"

          curl -L -o ksu_module_susfs.zip \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer ${{ env.GH_TOKEN }}" \
            "$ARTIFACT_URL" || { echo "❌ Failed to download artifact"; exit 1; }

          echo "Downloaded ksu_module_susfs.zip. Copying to AnyKernel3..."
          cp ksu_module_susfs.zip ./AnyKernel3/ || { echo "❌ Failed to copy SUSFS module to AnyKernel3"; exit 1; }
          echo "✅ SUSFS module added to AnyKernel3 directory."


      # Step 16: Upload Build Artifacts
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-${{ env.ROOT_DIR }}
          path: builds/${{ env.ROOT_DIR }}/*.zip

      # Step 17: Clean Up (Optional but good practice)
      - name: Clean Up
        if: always() # Run even if previous steps fail
        run: |
          echo "Cleaning up kernel source directory..."
          rm -rf builds/${{ env.ROOT_DIR }}/kernel_platform/oneplus13r_v
          echo "Cleanup complete."
