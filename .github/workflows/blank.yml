name: One+ Build Susf4Ksu

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 180

    env:
      ROOT_DIR: build_directory
      CONFIG: configuration_name

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install required tools
      run: |
        sudo apt-get update
        sudo apt-get install -y repo git curl zip

    - name: Clone repositories
      run: |
        repos=(
          "https://github.com/Kernel-SU/AnyKernel3 --depth=1"
          "https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android14-6.1"
          "https://github.com/WildPlusKernel/kernel_patches.git"
        )
        for repo in "${repos[@]}"; do
          git clone $repo || { echo "Failed to clone $repo"; exit 1; }
        done

    - name: Initialize and Sync Kernel Source
      run: |
        echo "Creating folder for configuration: $CONFIG..."
        mkdir -p "$CONFIG"
        cd "$CONFIG"
        echo "Initializing and syncing kernel source..."
        repo init -u https://github.com/OnePlusOSS/kernel_manifest -b oneplus/sm8650/oneplus_13r --repo-rev=v2.16 --depth=1
        repo sync -c -j$(nproc --all) --no-tags --fail-fast

    - name: Add KernelSU
      run: |
        echo "Changing to configuration directory: $CONFIG..."
        cd "$CONFIG/kernel_platform"
        
        echo "Adding KernelSU..."
        curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next/kernel/setup.sh" | bash -s next
        KSU_VERSION=$(cd ./KernelSU-Next/kernel && git describe --tags --abbrev=0)
        echo "KSUVER=${KSU_VERSION}" >> $GITHUB_ENV

    - name: Apply SUSFS Patches
      run: |
        echo "Changing to configuration directory: $CONFIG..."
        cd "$CONFIG/kernel_platform"
        
        echo "Applying SUSFS patches..."
        cp ../../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch ./common/
        cp ../../susfs4ksu/kernel_patches/fs/* ./common/fs/
        cp ../../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/

        cd ./KernelSU-Next
        echo "Applying next SUSFS patches..."
        cp ../../../kernel_patches/next/0001-kernel-patch-susfs-v1.5.5-to-KernelSU-Next-v1.0.5.patch ./
        patch -p1 --forward < 0001-kernel-patch-susfs-v1.5.5-to-KernelSU-Next-v1.0.5.patch || true
        
        cd ../common
        patch -p1 < 50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch || true

    - name: Apply KSU Hooks
      run: |
        echo "Changing to configuration directory: $CONFIG..."
        cd "$CONFIG/kernel_platform/common"
        cp ../../../kernel_patches/next/next_hooks.patch ./
        patch -p1 --fuzz=3 < ./next_hooks.patch

    - name: Apply Hide Stuff Patches
      run: |
        echo "Changing to configuration directory: $CONFIG..."
        cd "$CONFIG/kernel_platform/common"
        cp ../../../kernel_patches/69_hide_stuff.patch ./
        patch -p1 -F 3 < 69_hide_stuff.patch

    - name: Add SUSFS Configuration Settings
      run: |
        echo "Changing to configuration directory: $CONFIG..."
        cd "$CONFIG/kernel_platform"
        
        echo "Adding configuration settings to gki_defconfig..."
        CONFIGS=(
          "CONFIG_KSU=y"
          "CONFIG_KSU_WITH_KPROBES=n"
          "CONFIG_KSU_SUSFS=y"
          "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y"
          "CONFIG_KSU_SUSFS_SUS_PATH=y"
          "CONFIG_KSU_SUSFS_SUS_MOUNT=y"
          "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y"
          "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y"
          "CONFIG_KSU_SUS_KSTAT=y"
          "CONFIG_KSU_SUS_OVERLAYFS=n"
          "CONFIG_KSU_SUS_TRY_UMOUNT=y"
          "CONFIG_KSU_SUS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y"
          "CONFIG_KSU_SUS_SPOOF_UNAME=y"
          "CONFIG_KSU_SUS_ENABLE_LOG=y"
          "CONFIG_KSU_SUS_HIDE_KSU_SUS_SYMBOLS=y"
          "CONFIG_KSU_SUS_SPOOF_CMDLINE_OR_BOOTCONFIG=y"
          "CONFIG_KSU_SUS_OPEN_REDIRECT=y"
          "CONFIG_KSU_SU=n"
          "CONFIG_TMPFS_XATTR=y"
          "CONFIG_TMPFS_POSIX_ACL=y"
          "CONFIG_IP_NF_TARGET_TTL=y"
          "CONFIG_IP6_NF_TARGET_HL=y"
          "CONFIG_IP6_NF_MATCH_HL=y"
          "CONFIG_SCHED_CLASS_EXT=y"
          "CONFIG_SMP=y"
          "CONFIG_CPU_FREQ_GOV_SCHEDUTIL=y"
          "CONFIG_MSM_PERFORMANCE=y"
          "CONFIG_NO_HZ_IDLE=y"
          "CONFIG_PM_SLEEP_SMP=y"
        )
        for CONFIG in "${CONFIGS[@]}"; do
          echo "$CONFIG" >> ./common/arch/arm64/configs/gki_defconfig
        done

    - name: Build Kernel
      working-directory: $CONFIG/kernel_platform
      run: |
        mkdir -p out
        export PATH="/usr/lib/ccache:$PATH"
        ./build_with_bazel.py \
          -t pineapple \
          gki \
          --jobs=$(nproc --all) \
          --verbose_failures \
          --config=stamp \
          --user_kmi_symbol_lists=//msm-kernel:android/abi_gki_aarch64_qcom \
          --ignore_missing_projects \
          --lto=full \
          -o "$(pwd)/out" || { echo "Bazel build failed"; exit 1; }

    - name: Create ZIP Package
      working-directory: $CONFIG/kernel_platform
      run: |
        if [ ! -f out/dist/Image ]; then
          echo "❌ Kernel image not found"
          exit 1
        fi
        cp out/dist/Image ../../AnyKernel3/Image || { echo "❌ Failed to copy kernel image"; exit 1; }
        cd ../../AnyKernel3
        ZIP_NAME="OP13r-KSU-${{ env.KSUVER }}.zip"
        zip -r "../$ZIP_NAME" ./* || { echo "❌ Failed to create zip file"; exit 1; }

    - name: Upload Build Artifacts
      uses](#) ▋
