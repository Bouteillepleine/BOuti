name: One+ build Susf4Ksu

on:
  push:
    branches:
      - main
  workflow_dispatch: # Input removed as CI module download is now unconditional

env:
  DEBIAN_FRONTEND: noninteractive
  ROOT_DIR_PREFIX: "OP13r-A15"
  BRANCH: "android14-6.1"
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build-release:
    runs-on: ubuntu-latest-64-cores
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Free Disk Space
        run: |
          sudo apt-get update -qq
          sudo apt-get install -qq curl jq # jq dependency for JSON parsing
          curl -fsSL https://raw.githubusercontent.com/kou/arrow/e49d8ae15583ceff03237571569099a6ad62be32/ci/scripts/util_free_space.sh | bash

      - name: Setup Build Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            python3-pip curl git zip unzip gcc g++ make ninja-build file \
            bc bison flex libssl-dev libelf-dev wget build-essential \
            python3-dev python3-setuptools rsync ccache cmake libdw-dev zlib1g-dev jq # jq dependency

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          max-size: 2G

      - name: Setup Python and Repo Tool
        run: |
          python3 -m pip install --upgrade pip
          pip3 install gitpython xmltodict
          mkdir -p ~/.bin
          curl -s https://storage.googleapis.com/git-repo-downloads/repo > ~/.bin/repo
          chmod a+x ~/.bin/repo
          echo "$HOME/.bin" >> $GITHUB_PATH
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Configure Build Directory
        run: |
          ROOT_DIR="${ROOT_DIR_PREFIX}-$(date +'%Y-%m-%d-%I-%M-%p')-release"
          echo "ROOT_DIR=${ROOT_DIR}" >> $GITHUB_ENV
          mkdir -p "builds/${ROOT_DIR}"

      - name: Clone Required Repositories
        working-directory: builds/${{ env.ROOT_DIR }}
        run: |
          repos=(
            "https://github.com/Kernel-SU/AnyKernel3 --depth=1 AnyKernel3"
            "https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android14-6.1 susfs4ksu"
            "https://github.com/WildPlusKernel/kernel_patches.git kernel_patches"
          )
          for repo_info in "${repos[@]}"; do
            repo=$(echo "$repo_info" | awk '{print $1}')
            branch_or_args=$(echo "$repo_info" | awk '{$1=""; $NF=""; print $0}' | sed 's/^[ \t]*//;s/[ \t]*$//')
            dest=$(echo "$repo_info" | awk '{print $NF}')
            echo "Cloning $repo $branch_or_args into $dest..."
            git clone $repo $branch_or_args "$dest" || { echo "Failed to clone $repo"; exit 1; }
          done

      - name: Setup Kernel Source
        working-directory: builds/${{ env.ROOT_DIR }}
        run: |
          mkdir -p kernel_platform/oneplus13r_v
          cd kernel_platform/oneplus13r_v
          repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b oneplus/sm8650 -m oneplus_13r.xml --depth=1 || { echo "Failed to initialize repo"; exit 1; }
          repo sync -c -j$(nproc --all) --force-sync --no-clone-bundle --no-tags || { echo "Failed to sync repo"; exit 1; }
          rm -rf ./kernel_platform/common/android/abi_gki_protected_exports_*

      - name: Setup KernelSU
        working-directory: builds/${{ env.ROOT_DIR }}/kernel_platform/oneplus13r_v/kernel_platform
        run: |
          curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next/kernel/setup.sh" | bash -s next
          git submodule update --init --recursive
          cd KernelSU-Next/kernel
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count HEAD) "+" 10200)
          echo "Calculated KSU_VERSION: $KSU_VERSION"
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          sed -i "s/DKSU_VERSION=11998/DKSU_VERSION=${KSU_VERSION}/" Makefile

      - name: Setup SUSFS
        working-directory: builds/${{ env.ROOT_DIR }}/kernel_platform/oneplus13r_v/kernel_platform
        run: |
          set -euxo pipefail
          echo "Copying patches and source files..."
          cp ../../../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android14-6.1.patch ./common/
          cp ../../../kernel_patches/next/0001-kernel-patch-susfs-v1.5.5-to-KernelSU-Next-v1.0.5.patch ./KernelSU-Next/
          cp ../../../kernel_patches/next/syscall_hooks.patch ./common/
          cp ../../../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../../../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/

          echo "Applying patches..."
          cd ./KernelSU-Next
          patch -p1 < 0001-kernel-patch-susfs-v1.5.5-to-KernelSU-Next-v1.0.5.patch || true
          cd ../common
          patch -p1 < 50_add_susfs_in_gki-android14-6.1.patch || true

          if [ -f ../../../kernel_patches/69_hide_stuff.patch ]; then
            echo "Applying hide_stuff patch..."
            cp ../../../kernel_patches/69_hide_stuff.patch ./
            patch -p1 -F 3 < 69_hide_stuff.patch || true
          else
             echo "hide_stuff patch not found at ../../../kernel_patches/69_hide_stuff.patch"
          fi
          
          echo "Applying syscall_hooks patch..."
          patch -p1 -F 3 < syscall_hooks.patch || true

      - name: Configure Kernel
        working-directory: builds/${{ env.ROOT_DIR }}/kernel_platform/oneplus13r_v/kernel_platform
        run: |
          set -e
          echo "Appending KernelSU/SUSFS configs to gki_defconfig..."
          CONFIGS=(
            "CONFIG_KSU=y"
            "CONFIG_KSU_WITH_KPROBES=n"
            "CONFIG_KSU_SUSFS=y"
            "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y"
            "CONFIG_KSU_SUSFS_SUS_PATH=y"
            "CONFIG_KSU_SUSFS_SUS_MOUNT=y"
            "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y"
            "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y"
            "CONFIG_KSU_SUSFS_SUS_KSTAT=y"
            "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n"
            "CONFIG_KSU_SUSFS_TRY_UMOUNT=y"
            "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y"
            "CONFIG_KSU_SUSFS_SPOOF_UNAME=y"
            "CONFIG_KSU_SUSFS_ENABLE_LOG=y"
            "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y"
            "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y"
            "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y"
            "CONFIG_KSU_SUSFS_SUS_SU=n"
            # Filesystem
            "CONFIG_TMPFS_XATTR=y"
            "CONFIG_TMPFS_POSIX_ACL=y"
            # Network
            "CONFIG_IP_NF_TARGET_TTL=y"
            "CONFIG_IP6_NF_TARGET_HL=y"
            "CONFIG_IP6_NF_MATCH_HL=y"
            # Scheduler
            "CONFIG_SCHED_CLASS_EXT=y"
            "CONFIG_SMP=y"
            "CONFIG_CPU_FREQ_GOV_SCHEDUTIL=y"
            "CONFIG_MSM_PERFORMANCE=y"
            # power consumption
            "CONFIG_NO_HZ_IDLE=y"
            "CONFIG_PM_SLEEP_SMP=y"
          )
          for CONFIG in "${CONFIGS[@]}"; do
            echo "$CONFIG" >> ./common/arch/arm64/configs/gki_defconfig
          done
          echo "Modifying build.config.gki..."
          sed -i 's/check_defconfig//' ./common/build.config.gki

      - name: Run sed Commands
        working-directory: builds/${{ env.ROOT_DIR }}/kernel_platform/oneplus13r_v/kernel_platform
        run: |
          echo "Running sed commands to remove -dirty suffix..."
          sed -i 's/-dirty//' ./common/scripts/setlocalversion
          sed -i 's/-dirty//' ./msm-kernel/scripts/setlocalversion
          sed -i 's/-dirty//' ./external/dtc/scripts/setlocalversion
          sed -i 's/-dirty//' ./build/kernel/kleaf/workspace_status_stamp.py || echo "No workspace_status_stamp.py found to patch."

      - name: Build Kernel
        working-directory: builds/${{ env.ROOT_DIR }}/kernel_platform/oneplus13r_v/
        run: |
          cd kernel_platform
          mkdir -p out
          export PATH="/usr/lib/ccache:$PATH"
          echo "Starting kernel build..."
          ./build_with_bazel.py \
            -t pineapple \
            gki \
            --jobs=$(nproc --all) \
            --verbose_failures \
            --config=stamp \
            --user_kmi_symbol_lists=//msm-kernel:android/abi_gki_aarch64_qcom \
            --ignore_missing_projects \
            --lto=thin \
            -o "$(pwd)/out" || { echo "Bazel build failed"; exit 1; }
          echo "Kernel build finished."

      - name: Download Latest SUSFS Module from CI # UNCONDITIONAL
        # if: removed - this step now runs always
        run: |
          echo "Downloading SUSFS module from CI artifact..."
          # Fetch the latest successful run ID on the main branch
          LATEST_RUN_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/runs?status=success&branch=main" | jq -r '.workflow_runs[0].id') 

          if [ -z "$LATEST_RUN_ID" ] || [ "$LATEST_RUN_ID" == "null" ]; then
            echo "Could not find latest successful CI run ID for sidex15/susfs4ksu-module on main branch."
            exit 1
          fi
          echo "Found latest successful run ID: $LATEST_RUN_ID"

          # Find the artifact named "ksu_module_susfs" from that run
          ARTIFACT_URL=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/runs/$LATEST_RUN_ID/artifacts" | jq -r '.artifacts[] | select(.name=="ksu_module_susfs") | .archive_download_url') 

          if [ -z "$ARTIFACT_URL" ] || [ "$ARTIFACT_URL" == "null" ]; then
             echo "Could not find artifact 'ksu_module_susfs' download URL for run ID $LATEST_RUN_ID."
             # Optional: list available artifacts for debugging
             echo "Available artifacts:"
             curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
               "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/runs/$LATEST_RUN_ID/artifacts" | jq -r '.artifacts[] | .name'
             exit 1
          fi
          echo "Found artifact download URL: $ARTIFACT_URL"
          
          # Download the artifact (which is a zip containing the actual module zip)
          curl -L -o susfs_module_artifact.zip -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "$ARTIFACT_URL" || { echo "Failed to download artifact"; exit 1; }
          
          # Extract the actual module zip (assuming it's named ksu_module_susfs*.zip inside the artifact)
          # If the artifact zip *is* the module, just rename it. If it contains the module, unzip it.
          # Using unzip -p to extract to stdout and redirect, handles cases where artifact contains other files.
          # Adjust the pattern if the module name inside the artifact zip is different.
          unzip -p susfs_module_artifact.zip 'ksu_module_susfs*.zip' > ksu_module_susfs.zip 2>/dev/null || { 
            echo "Failed to extract 'ksu_module_susfs*.zip' from artifact. Maybe the artifact is the module itself?"
            # Attempt to use the artifact directly if extraction failed
            if unzip -t susfs_module_artifact.zip &>/dev/null; then 
               echo "Treating downloaded artifact as the module zip."
               mv susfs_module_artifact.zip ksu_module_susfs.zip
            else
               echo "Downloaded artifact is not a valid zip file."
               exit 1
            fi
          }
          
          echo "Copying downloaded CI module to AnyKernel3 directory..."
          cp ksu_module_susfs.zip builds/${{ env.ROOT_DIR }}/AnyKernel3/ || { echo "Failed to copy CI module"; exit 1; }
          
          # Clean up temporary downloaded files
          rm -f susfs_module_artifact.zip ksu_module_susfs.zip 
          echo "SUSFS Module from CI added to AnyKernel3."

      # Step "Download Latest SUSFS Module from Release" has been removed

      - name: Create ZIP Package
        working-directory: builds/${{ env.ROOT_DIR }}
        run: |
          echo "Checking for Kernel Image..."
          KERNEL_IMAGE_PATH="kernel_platform/oneplus13r_v/kernel_platform/out/dist/Image"
          if [ ! -f "$KERNEL_IMAGE_PATH" ]; then
            echo "❌ Kernel image not found at $KERNEL_IMAGE_PATH"
            ls -lR kernel_platform/oneplus13r_v/kernel_platform/out/dist/
            exit 1
          fi
          echo "Copying Kernel Image to AnyKernel3..."
          cp "$KERNEL_IMAGE_PATH" AnyKernel3/Image || {
            echo "❌ Failed to copy kernel image"
            exit 1
          }
          
          cd AnyKernel3
          echo "Contents of AnyKernel3 before zipping:"
          ls -lA # Use -A to see hidden files like .gitkeep if AnyKernel3 uses them
          
          if [ -z "${{ env.KSUVER }}" ]; then
            echo "❌ KSUVER environment variable is not set!"
            # Attempt to calculate it again as a fallback? Or just fail.
            exit 1
          fi
          ZIP_NAME="OP13r-KSU-${{ env.KSUVER }}.zip"
          echo "📦 Creating zip file: $ZIP_NAME"
          zip -r9 "../$ZIP_NAME" ./* .??* || { # Include dotfiles if any, use level 9 compression
            echo "❌ Failed to create zip file"
            exit 1
          }
          cd .. 
          echo "Generated Zip:"
          ls -lh "$ZIP_NAME"
          echo "zip_name=$ZIP_NAME" >> $GITHUB_ENV

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-${{ env.ROOT_DIR }}
          path: builds/${{ env.ROOT_DIR }}/*.zip
